import java.net.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Date;
/**
 * This program is a server that takes connection requests on
 * the port specified by the constant LISTENING_PORT.  When a
 * connection is opened, the program should allow the client to send it messages. The messages should then 
 * become visible to all other clients.  The program will continue to receive
 * and process connections until it is killed (by a CONTROL-C,
 * for example). 
 * 
 * This version of the program creates a new thread for
 * every connection request.
 */
public class ChatServerWithThreads {
    public static final int LISTENING_PORT = 9876;
    private static ArrayList<ConnectionHandler> connections= new ArrayList();      // For communication with the connecting program.
    
    public static void main(String[] args) {
        ServerSocket listener;  // Listens for incoming connections.
       
        /* Accept and process connections forever, or until some error occurs. */
        try {
            listener = new ServerSocket(LISTENING_PORT);
            System.out.println("Listening on port " + LISTENING_PORT);
            while (true) {
                Socket s = listener.accept();
                ConnectionHandler handler = new ConnectionHandler(s);
                handler.start();
                connections.add(handler);
          
                
            }
        }
        catch (Exception e) {
            System.out.println("Sorry, the server has shut down.");
            System.out.println("Error:  " + e);
            return;
        }
    }  // end main()
    /**
     *  Defines a thread that handles the connection with one
     *  client.
     */
    private static class ConnectionHandler extends Thread {
        private Socket client;
        private ObjectOutputStream os;
        private ObjectInputStream is;
        
        ConnectionHandler(Socket socket) {
            client = socket;
            try {
            //set up your streams, make sure this order is reversed on the client side!
os = new ObjectOutputStream(socket.getOutputStream());
is = new ObjectInputStream(socket.getInputStream());
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
        }
        
        //method to help us send information!
        public void send(String input) {
        try {
os.writeObject(input);
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
        }
        
        
        public void run() {
            while(true) {
            try {
            String input= (String)is.readObject();
            //your code to send messages goes here.
            if(input!= null) {
            for(ConnectionHandler handler: connections) {
            //make sure you don't try to access the handler from two different threads simultainously
            synchronized(handler) {
            handler.send(input);
            }
            }
            }
            }
            catch (Exception e){
                System.out.println("Error on connection " 
                        + ": " + e);
            }
            }
        }
    }
}
